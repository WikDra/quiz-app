import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
import { API_BASE_URL } from '../utils/constants';

/**
 * Component for debugging authentication state
 * Only shown in development environment
 */
const DebugAuthState = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [cookieInfo, setCookieInfo] = useState({
    hasAuthCookie: false,
    cookieCount: 0
  });
  const { user } = useAuth();
  
  // Check for cookies and update state
  const updateCookieInfo = useCallback(() => {
    const cookies = document.cookie;
    const hasAuthCookie = cookies.includes('auth_success');
    const count = cookies.split(';').filter(c => c.trim().length > 0).length;
    
    setCookieInfo({
      hasAuthCookie,
      cookieCount: count
    });
    
    // Log auth state info for debugging
    if (user && !hasAuthCookie) {
      console.warn('[AuthStateLogger] User present but no auth cookies - possible sync issue');
    }
  }, [user]);
  
  // Check for cookies periodically
  useEffect(() => {
    updateCookieInfo();
    const timer = setInterval(updateCookieInfo, 2000);
    return () => clearInterval(timer);
  }, [updateCookieInfo]);
  
  // Log auth state changes
  useEffect(() => {
    console.log('[AuthStateLogger] Auth state changed:', {
      isLoggedIn: !!user,
      userId: user?.id || null,
      hasCookies: cookieInfo.hasAuthCookie
    });
  }, [user, cookieInfo.hasAuthCookie]);
  
  // Only show in development
  if (import.meta.env.DEV !== true) {
    return null;
  }
  
  return (
    <div style={{ 
      position: 'fixed',
      bottom: '10px',
      right: '10px',
      background: 'rgba(0,0,0,0.8)',
      color: '#fff',
      padding: '10px',
      borderRadius: '5px',
      fontSize: '12px',
      zIndex: 9999,
      maxWidth: '400px',
      maxHeight: isVisible ? '400px' : '30px',
      overflow: 'auto',
      transition: 'max-height 0.3s'
    }}>
      <button 
        onClick={() => setIsVisible(!isVisible)}
        style={{
          background: 'transparent',
          border: 'none',
          color: '#fff',
          cursor: 'pointer',
          padding: '0',
          margin: '0'
        }}
      >
        {isVisible ? 'Hide Auth Debug' : 'Show Auth Debug'}
      </button>
      
      {isVisible && (
        <div>
          <h4>Auth Status:</h4>
          <div>User: {user ? `ID: ${user.id}, Email: ${user.email}` : 'Not logged in'}</div>
          <div>Auth Cookie: {cookieInfo.hasAuthCookie ? 'Present ✅' : 'Missing ❌'}</div>
          <div>Total Cookies: {cookieInfo.cookieCount}</div>
          
          <div style={{ marginTop: '10px', display: 'flex', gap: '10px' }}>
            <button 
              onClick={async () => {
                try {
                  await fetch(`${API_BASE_URL}/api/debug/auth`, {
                    credentials: 'include'
                  }).then(r => r.json()).then(data => {
                    console.log("Debug auth info:", data);
                    alert(JSON.stringify({
                      jwt_present: data.jwt_access_present,
                      user_id: data.jwt_identity,
                      cookies_count: Object.keys(data.cookies).length
                    }, null, 2));
                  });
                } catch (error) {
                  console.error('Error:', error);
                  alert(`Error: ${error.message}`);
                }
              }}
              style={{
                background: '#4285F4',
                color: 'white',
                border: 'none',
                padding: '5px 10px',
                borderRadius: '3px',
                cursor: 'pointer',
                flex: '1'
              }}
            >
              Debug Auth
            </button>
            
            <button 
              onClick={async () => {
                try {
                  // Call the logout API endpoint to clear cookies
                  await fetch(`${API_BASE_URL}/api/logout`, {
                    method: 'POST',
                    credentials: 'include'
                  });
                  window.location.reload();
                } catch (error) {
                  console.error('Error:', error);
                  alert(`Error: ${error.message}`);
                }
              }}
              style={{
                background: '#f44336',
                color: 'white',
                border: 'none',
                padding: '5px 10px',
                borderRadius: '3px',
                cursor: 'pointer',
                flex: '1'
              }}
            >
              Logout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default DebugAuthState;
